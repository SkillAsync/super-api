type User {  
    uuid: String!
    first_name: String
    last_name: String
    email: String!
    email_verified_at: String
    phone_country: String
    phone: String
    avatar: String
    country: String
    city: String
    address: String
    bio: String
    enabled: Boolean
}

type Freelancer {
    uuid: String!
    user: User! @belongsTo
    description: String!
    nif: String
    services: [Service!] @hasMany
    status: status!
}

input CreateUserInput {
    first_name: String
    last_name: String
    email: String! @rules(apply: ["required", "email"])
    password: String! @rules(apply: ["required", "min:8"])
    phone_country: String
    phone: String @rules(apply: ["min:1", "max:15"])
    avatar: String
    country: String
    city: String
    address: String
    bio: String
    enabled: Boolean
}

input UpdateUserInput {
    first_name: String
    last_name: String
    email: String @rules(apply: ["unique:users,email"])
    password: String @rules(apply: ["min:8"])
    phone_country: String @rules(apply: ["min:1", "max:3"])
    phone: String
    avatar: String
    country: String
    city: String
    address: String
    bio: String
    enabled: Boolean
}

input CreataFreelancerForUserInput {
    user: CreateBelongsTo!
    description: String!
    nif: String
    services: [CreateBelongsTo!]
    status: status
}

extend type Query {
    getUser(
        uuid: String! @eq
    ): User! @find 
    getAllUsers(
        last_name: String @where(operator: "like"),
        first_name: String @where(operator: "like"),
        email: String @where(operator: "like"),
        orderBy: _ @orderBy(columns: [
            "first_name",
            "last_name",
            "email",
            "created_at",
        ])
    ): [User!]! @paginate(defaultCount: 10) 
}

extend type Mutation {
    createUser(input: CreateUserInput! @spread): User @field(resolver: "CreateOrUpdateMutation") 
    updateUser(uuid: String! @eq,input: UpdateUserInput! @spread): User @field(resolver: "CreateOrUpdateMutation") @guard 
    deleteUser(uuid: String! @eq): User @field(resolver: "CreateOrUpdateMutation") @guard 

    createFreelancerForUser(input: CreataFreelancerForUserInput! @spread): User @field(resolver: "AssignRole") @guard
}
