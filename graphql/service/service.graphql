type Service {
  uuid: String!
  user: User! @belongsTo
  category: Category @belongsTo
  title: String!
  description: String!
  price: Float!
  image: String!
  status: status!
}

input CreateserviceInput {
    user: CreateBelongsTo!
    category: CreateBelongsTo!
    title: String!
    description: String!
    price: Float!
    image: String
    status: status
}

enum status {
    ACTIVE @enum(value: "active")
    INACTIVE @enum(value: "inactive")
}

input UpdateserviceInput {
    user: UpdateBelongsTo
    category: UpdateBelongsTo
    title: String
    description: String
    price: Float
    image: String
}

extend type Query {
    getservice(
        uuid: String! @eq
    ): Service! @find

    getAllservices(
        title: String @where(operator: "like"),
        description: String @where(operator: "like"),
        price: Float @where(operator: "eq"),
        status: status @where(operator: "eq")
        generecSearch: String @builder(method: "App\\GraphQL\\Builders\\GenericSearch@searchServiceByTitleOrDescription")
    ): [Service!]! @paginate(defaultCount: 11) 
}

extend type Mutation {
    createservice(input: CreateserviceInput!): Service! @field(resolver: "CreateOrUpdateService") @guard
    updateservice(uuid: String!, input: UpdateserviceInput!): Service! @field(resolver: "CreateOrUpdateService") @guard
    deleteservice(uuid: String!): Service! @field(resolver: "CreateOrUpdateService") @guard
}